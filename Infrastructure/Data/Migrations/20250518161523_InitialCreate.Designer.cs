// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250518161523_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PostedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFCADA3C829A");

                    b.HasIndex(new[] { "ParentCommentId" }, "IDX_Comments_ParentCommentId");

                    b.HasIndex(new[] { "PostId", "PostedAt" }, "IDX_Comments_PostId_PostedAt");

                    b.HasIndex(new[] { "UserId" }, "IDX_Comments_UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupId")
                        .HasName("PK__Groups__149AF36AA95CDC58");

                    b.HasIndex(new[] { "CreatedBy" }, "IDX_Groups_CreatedBy");

                    b.HasIndex(new[] { "Visibility" }, "IDX_Groups_Visibility");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.Entities.GroupChat", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GroupChatId")
                        .HasName("PK__GroupCha__C9AA2EA1E855EB61");

                    b.HasIndex(new[] { "CreatedBy" }, "IDX_GroupChats_CreatedBy");

                    b.ToTable("GroupChats");
                });

            modelBuilder.Entity("Domain.Entities.GroupChatMember", b =>
                {
                    b.Property<Guid>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupChatId", "UserId")
                        .HasName("PK__GroupCha__18D2A2654B9D4A10");

                    b.HasIndex(new[] { "GroupChatId", "Role" }, "IDX_GroupChatMembers_GroupChatId_Role");

                    b.HasIndex(new[] { "UserId" }, "IDX_GroupChatMembers_UserId");

                    b.ToTable("GroupChatMembers");
                });

            modelBuilder.Entity("Domain.Entities.GroupMember", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupId", "UserId")
                        .HasName("PK__GroupMem__C5E27FAE9537C213");

                    b.HasIndex(new[] { "GroupId", "Role" }, "IDX_GroupMembers_GroupId_Role");

                    b.HasIndex(new[] { "Status" }, "IDX_GroupMembers_Status");

                    b.HasIndex(new[] { "UserId" }, "IDX_GroupMembers_UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MediaId")
                        .HasName("PK__Media__B2C2B5CF58E00B9C");

                    b.HasIndex(new[] { "MessageId" }, "IDX_Media_MessageId");

                    b.HasIndex(new[] { "PostId" }, "IDX_Media_PostId");

                    b.HasIndex(new[] { "UploadedAt" }, "IDX_Media_UploadedAt");

                    b.HasIndex(new[] { "UploadedBy" }, "IDX_Media_UploadedBy");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__C87C0C9CBE070AB4");

                    b.HasIndex(new[] { "GroupChatId", "SentAt" }, "IDX_Messages_GroupChatId_SentTime");

                    b.HasIndex(new[] { "IsVisible" }, "IDX_Messages_IsVisible");

                    b.HasIndex(new[] { "ReceiverId" }, "IDX_Messages_ReceiverId");

                    b.HasIndex(new[] { "SenderId" }, "IDX_Messages_SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RelatedMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RelatedPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RelatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E1204857B05");

                    b.HasIndex("RelatedMessageId");

                    b.HasIndex("RelatedPostId");

                    b.HasIndex("RelatedUserId");

                    b.HasIndex(new[] { "Type" }, "IDX_Notifications_Type");

                    b.HasIndex(new[] { "UserId", "NotifiedAt" }, "IDX_Notifications_UserId_PostedAt");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("PostedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId")
                        .HasName("PK__Posts__AA126018B80AE7C9");

                    b.HasIndex(new[] { "GroupId", "IsApproved", "PostedAt" }, "IDX_Posts_GroupId_IsApproved_PostedAt");

                    b.HasIndex(new[] { "IsVisible" }, "IDX_Posts_IsVisible");

                    b.HasIndex(new[] { "PostedAt" }, "IDX_Posts_PostedAt");

                    b.HasIndex(new[] { "UserId", "PostedAt" }, "IDX_Posts_UserId_PostedAt");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Domain.Entities.PostVote", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VoteType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("VotedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "PostId")
                        .HasName("PK__PostVote__8D29EA4D9834C106");

                    b.HasIndex(new[] { "PostId" }, "IDX_PostVotes_PostId");

                    b.HasIndex(new[] { "UserId" }, "IDX_PostVotes_UserId");

                    b.ToTable("PostVotes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("DeletedUserEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Intro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C89A5FCDE");

                    b.HasIndex(new[] { "Status", "JoinedAt" }, "IDX_Users_Status_JoinedAt");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4E68D6526")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534C261CDB1")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.UserFollow", b =>
                {
                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FollowedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FollowerId", "FollowedId")
                        .HasName("PK__UserFoll__F7A5FC9F1E4BC56C");

                    b.HasIndex(new[] { "FollowedId" }, "IDX_UserFollows_FollowedId");

                    b.HasIndex(new[] { "FollowerId" }, "IDX_UserFollows_FollowerId");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Comment", "ParentComment")
                        .WithMany("ChildComments")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK_Comments_ParentCommentId");

                    b.HasOne("Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_PostId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_UserId");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.HasOne("Domain.Entities.User", "Creator")
                        .WithMany("Groups")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Groups_CreatedBy");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.GroupChat", b =>
                {
                    b.HasOne("Domain.Entities.User", "Creator")
                        .WithMany("GroupChats")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK_GroupChats_CreatedBy");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Entities.GroupChatMember", b =>
                {
                    b.HasOne("Domain.Entities.GroupChat", "GroupChat")
                        .WithMany("GroupChatMembers")
                        .HasForeignKey("GroupChatId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupChatMembers_GroupChatId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("GroupChatMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupChatMembers_UserId");

                    b.Navigation("GroupChat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.GroupMember", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMembers_GroupId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupMembers_UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Media", b =>
                {
                    b.HasOne("Domain.Entities.Message", "Message")
                        .WithMany("Media")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_Media_MessageId");

                    b.HasOne("Domain.Entities.Post", "Post")
                        .WithMany("Media")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Media_PostId");

                    b.HasOne("Domain.Entities.User", "UploadedByNavigation")
                        .WithMany("UploadedMedia")
                        .HasForeignKey("UploadedBy")
                        .IsRequired()
                        .HasConstraintName("FK_Media_UploadedBy");

                    b.Navigation("Message");

                    b.Navigation("Post");

                    b.Navigation("UploadedByNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.HasOne("Domain.Entities.GroupChat", "GroupChat")
                        .WithMany("Messages")
                        .HasForeignKey("GroupChatId")
                        .HasConstraintName("FK_Messages_GroupChatId");

                    b.HasOne("Domain.Entities.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_Messages_ReceiverId");

                    b.HasOne("Domain.Entities.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Messages_SenderId");

                    b.Navigation("GroupChat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Domain.Entities.Notification", b =>
                {
                    b.HasOne("Domain.Entities.Message", "RelatedMessage")
                        .WithMany("Notifications")
                        .HasForeignKey("RelatedMessageId")
                        .HasConstraintName("FK_Notifications_RelatedMessageId");

                    b.HasOne("Domain.Entities.Post", "RelatedPost")
                        .WithMany("Notifications")
                        .HasForeignKey("RelatedPostId")
                        .HasConstraintName("FK_Notifications_RelatedPostId");

                    b.HasOne("Domain.Entities.User", "RelatedUser")
                        .WithMany("CreatedNotifications")
                        .HasForeignKey("RelatedUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_RelatedUserId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifications_UserId");

                    b.Navigation("RelatedMessage");

                    b.Navigation("RelatedPost");

                    b.Navigation("RelatedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.HasOne("Domain.Entities.Group", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Posts_GroupId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Posts_UserId");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PostVote", b =>
                {
                    b.HasOne("Domain.Entities.Post", "Post")
                        .WithMany("PostVotes")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostVotes_PostId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("PostVotes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_PostVotes_UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserFollow", b =>
                {
                    b.HasOne("Domain.Entities.User", "Followed")
                        .WithMany("Followings")
                        .HasForeignKey("FollowedId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFollows_FollowedId");

                    b.HasOne("Domain.Entities.User", "Follower")
                        .WithMany("Followers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_UserFollows_FollowerId");

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("Domain.Entities.Comment", b =>
                {
                    b.Navigation("ChildComments");
                });

            modelBuilder.Entity("Domain.Entities.Group", b =>
                {
                    b.Navigation("GroupMembers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Domain.Entities.GroupChat", b =>
                {
                    b.Navigation("GroupChatMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Message", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Media");

                    b.Navigation("Notifications");

                    b.Navigation("PostVotes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CreatedNotifications");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("GroupChatMembers");

                    b.Navigation("GroupChats");

                    b.Navigation("GroupMembers");

                    b.Navigation("Groups");

                    b.Navigation("PostVotes");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentMessages");

                    b.Navigation("UploadedMedia");
                });
#pragma warning restore 612, 618
        }
    }
}
